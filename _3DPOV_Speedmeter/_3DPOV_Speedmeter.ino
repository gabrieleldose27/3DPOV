#include <SPI.h>
// First index is the number being displayed, the second index is the column and the third one is
// the distance from the middle
const byte numbers[][5][6] = 
{
  // 0
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100100, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b10000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100100, 0b10010000}
  },
  
  // 1
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00100100, 0b10010010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000}
  },
  
  // 2
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b10000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00010010}
  },
  
  // 3
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b00010000}
  },
  
  // 4
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b10000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00100100, 0b10010010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000000, 0b10000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b10000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b10000000}
  },
  
  // 5
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00100000, 0b00010000}
  },
  
  // 6
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100100, 0b10010000}
  },
  
  // 7
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00100000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b10010010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b00000000}
  },
  
  // 8
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b10010000}
  },
  
  // 9
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100100, 0b10000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00100000, 0b00000000}
  },
  
  // , (made by :)
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b10010000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b10000010}
  },
  
  // space (made by ;)
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000}
  },
  
  // H (made by <)
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00100100, 0b10010010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000100, 0b00000000},
    {0b00000000, 0b00000000, 0b00000000, 0b00001001, 0b00100100, 0b10010010}
  },
  
  // z (made by =)
  {
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100100, 0b00000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b10000010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00010010},
    {0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00100000, 0b00000010}
  }
};


volatile uint32_t currentPixel = 0;
volatile uint32_t periodAverage = 18000;
volatile uint32_t periodRaw = 0;
volatile int32_t currentCharIndex = 0;
volatile char currentChar;
volatile uint32_t currentNumber;
String periodString;
volatile boolean finished = false;
elapsedMicros sinceMagnet;

const uint32_t latchPin=5;
const uint32_t outputEnable=4;
const uint32_t hallpin = 20;

SPISettings mySettings(48000000, LSBFIRST, SPI_MODE0);

IntervalTimer outputTimer;

void setup() {
  pinMode(hallpin, INPUT_PULLUP);
  pinMode(outputEnable, OUTPUT);
  pinMode(latchPin, OUTPUT);
  digitalWrite(outputEnable, LOW);

  SPI.begin();
  
  attachInterrupt(hallpin, timerUpdate, FALLING);
}

void loop() {}

void timerUpdate() {
  // Calculate the exponential moving average of the period measurement
  periodAverage = (sinceMagnet + 15*periodAverage)/16;
  periodRaw = sinceMagnet;

  sinceMagnet = 0;
  currentPixel = 63;
  currentPixel = 0;
  
  outputTimer.end();
  outputTimer.begin(sendData, periodAverage/128);
  
  periodString = String(periodRaw) + ":" + String(1000000/periodRaw) + "<=";
  periodString = periodString + ";" + periodString;
  currentCharIndex = 1;
  currentNumber = periodString.charAt(periodString.length() - 1) - '0';
  finished = false;
} // End of timerUpdate()

void sendData() {
  SPI.beginTransaction(mySettings);  
  if(!finished) 
  {
    if(currentPixel%6 == 5) //if space is to be displayed
    {
      sendEmptyBytes(60);
      pulseLatch();
      moveToNextChar();
    } 
    else //if no space is to displayed
    {
      sendEmptyBytes(54);
      for(int i=5; i>=0; i--) {
        SPI.transfer(numbers[currentNumber][currentPixel%6][i]);
      }
      pulseLatch();
    }
  } else { //if (finished)
    sendEmptyBytes(60);
    pulseLatch();
  }
  
  SPI.endTransaction();
  currentPixel++;
}

void sendEmptyBytes(int count) {
  // Already done before
  // SPI.beginTransaction(mySettings);
  for(int i=0; i<count; i++){
    SPI.transfer(0b00000000);      
  }
  // SPI.endTransaction();
}

void pulseLatch() {
  digitalWrite(latchPin, HIGH);
  delayMicroseconds(1);
  digitalWrite(latchPin, LOW);
}

void moveToNextChar() {
  currentCharIndex++;
  if(currentCharIndex > periodString.length()) {
    finished = true;
  } else {
    currentChar = periodString.charAt(periodString.length() - currentCharIndex);
    currentNumber = currentChar - '0';
  }
}
